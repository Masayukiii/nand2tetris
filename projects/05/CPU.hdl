// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Decode(in=instruction, i=i, a=a, c1=c1, c2=c2, c3=c3, c4=c4, c5=c5, c6=c6, d1=d1, d2=d2, d3=d3, j1=j1, j2=j2, j3=j3);

    // rewrite  value of memory[A]?
    And(a=d3, b=d3, out=writeM);

    // A register
    Not(in=i, out=noti);
    Or(a=noti, b=d1, out=load-a-register);
    ARegister(in=a-c-muxout , load=load-a-register, out=a-register-out);
    Normalization15(in=a-register-out, out=addressM);

    // Value of a register or Value of memory
    Mux16(a=a-register-out, b=inM, sel=a, out=a-m-muxout);

    // calculate by ALU
    ALU(x=d-register-out, y=a-m-muxout, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=alu-out, zr=zr, ng=ng);

    // output new value of memory
    And16(a=alu-out, b=alu-out, out=outM);

    // D register
    DRegister(in=alu-out, load=d2, out=d-register-out);

    // A instruction or C instruction
    Mux16(a=instruction, b=alu-out, sel=i, out=a-c-muxout);

    // confirm jump condition is true
    Jump(zr=zr, ng=ng, j1=j1, j2=j2, j3=j3, out=jump-load);
    Not(in=jump-load, out=not-jump-load);

    // Program counter
    PC(in=a-register-out, load=jump-load, inc=not-jump-load, reset=reset, out=pc-out);
    Normalization15(in=pc-out, out=pc);
}
